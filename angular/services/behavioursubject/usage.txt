import { Component } from '@angular/core';
import { CartService } from './cart.service';

@Component({
  selector: 'app-cart',
  template: `
    <h2>Shopping Cart</h2>
    <div *ngFor="let item of cartItems$ | async">
      <p>{{ item.name }} - {{ item.quantity }} x {{ item.price }} = {{ item.quantity * item.price }}</p>
    </div>
    <p><strong>Total Items:</strong> {{ cartCount$ | async }}</p>
    <p><strong>Total Price:</strong> {{ cartTotal$ | async }}</p>
    <button (click)="clearCart()">Clear Cart</button>
  `,
})
export class CartComponent {
  cartItems$ = this.cartService.cartItems$; // Observable for cart items
  cartCount$ = this.cartService.cartCount$; // Observable for cart item count
  cartTotal$ = this.cartService.cartTotal$; // Observable for cart total price

  constructor(private cartService: CartService) {}

  // Clear the cart
  clearCart() {
    this.cartService.clearCart();
  }
}


ORR




import { Component, OnInit, OnDestroy } from '@angular/core';
import { CartService } from './cart.service';
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-cart',
  template: `
    <h2>Shopping Cart</h2>
    <div *ngFor="let item of cartItems">
      <p>{{ item.name }} - {{ item.quantity }} x {{ item.price }} = {{ item.quantity * item.price }}</p>
    </div>
    <p><strong>Total Items:</strong> {{ cartCount }}</p>
    <p><strong>Total Price:</strong> {{ cartTotal }}</p>
    <button (click)="clearCart()">Clear Cart</button>
  `,
})
export class CartComponent implements OnInit, OnDestroy {
  cartItems: any[] = [];
  cartCount: number = 0;
  cartTotal: number = 0;
  
  private cartItemsSubscription: Subscription;
  private cartTotalSubscription: Subscription;
  private cartCountSubscription: Subscription;

  constructor(private cartService: CartService) {}

  ngOnInit() {
    // Manually subscribing to the cartItems$ observable
    this.cartItemsSubscription = this.cartService.cartItems$.subscribe(items => {
      this.cartItems = items;
    });

    // Manually subscribing to the cartTotal$ observable
    this.cartTotalSubscription = this.cartService.cartTotal$.subscribe(total => {
      this.cartTotal = total;
    });

    // Manually subscribing to the cartCount$ observable
    this.cartCountSubscription = this.cartService.cartCount$.subscribe(count => {
      this.cartCount = count;
    });
  }

  clearCart() {
    this.cartService.clearCart();
  }

  // Unsubscribe manually to prevent memory leaks
  ngOnDestroy() {
    if (this.cartItemsSubscription) {
      this.cartItemsSubscription.unsubscribe();
    }
    if (this.cartTotalSubscription) {
      this.cartTotalSubscription.unsubscribe();
    }
    if (this.cartCountSubscription) {
      this.cartCountSubscription.unsubscribe();
    }
  }
}
